// Code generated by mockery v2.42.1. DO NOT EDIT.

package testing

import (
	apphealth "github.com/dapr/dapr/pkg/apphealth"
	anypb "google.golang.org/protobuf/types/known/anypb"

	config "github.com/dapr/dapr/pkg/config"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/dapr/dapr/pkg/messaging/v1"
)

// MockAppChannel is an autogenerated mock type for the AppChannel type
type MockAppChannel struct {
	mock.Mock
}

// GetAppConfig provides a mock function with given fields: ctx, appID
func (_m *MockAppChannel) GetAppConfig(ctx context.Context, appID string) (*config.ApplicationConfig, error) {
	ret := _m.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppConfig")
	}

	var r0 *config.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*config.ApplicationConfig, error)); ok {
		return rf(ctx, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *config.ApplicationConfig); ok {
		r0 = rf(ctx, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthProbe provides a mock function with given fields: ctx
func (_m *MockAppChannel) HealthProbe(ctx context.Context) (*apphealth.Status, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthProbe")
	}

	var r0 *apphealth.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*apphealth.Status, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *apphealth.Status); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apphealth.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeMethod provides a mock function with given fields: ctx, req, appID
func (_m *MockAppChannel) InvokeMethod(ctx context.Context, req *v1.InvokeMethodRequest, appID string) (*v1.InvokeMethodResponse, error) {
	ret := _m.Called(ctx, req, appID)

	if len(ret) == 0 {
		panic("no return value specified for InvokeMethod")
	}

	var r0 *v1.InvokeMethodResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.InvokeMethodRequest, string) (*v1.InvokeMethodResponse, error)); ok {
		return rf(ctx, req, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.InvokeMethodRequest, string) *v1.InvokeMethodResponse); ok {
		r0 = rf(ctx, req, appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.InvokeMethodResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.InvokeMethodRequest, string) error); ok {
		r1 = rf(ctx, req, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAppHealth provides a mock function with given fields: ah
func (_m *MockAppChannel) SetAppHealth(ah *apphealth.AppHealth) {
	_m.Called(ah)
}

// TriggerJob provides a mock function with given fields: ctx, name, data
func (_m *MockAppChannel) TriggerJob(ctx context.Context, name string, data *anypb.Any) (*v1.InvokeMethodResponse, error) {
	ret := _m.Called(ctx, name, data)

	if len(ret) == 0 {
		panic("no return value specified for TriggerJob")
	}

	var r0 *v1.InvokeMethodResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *anypb.Any) (*v1.InvokeMethodResponse, error)); ok {
		return rf(ctx, name, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *anypb.Any) *v1.InvokeMethodResponse); ok {
		r0 = rf(ctx, name, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.InvokeMethodResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *anypb.Any) error); ok {
		r1 = rf(ctx, name, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAppChannel creates a new instance of MockAppChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppChannel {
	mock := &MockAppChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
